"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6532],{6322:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>r,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var s=n(4848),o=n(8453);const a={sidebar_position:2,title:"Get Theme value in global"},r="Get Theme Value Globally",l={id:"advanced/global-theme-value",title:"Get Theme value in global",description:"The React Native Styled System does not provide a way to retrieve themes from globally outside of React's Context.",source:"@site/docs/advanced/global-theme-value.mdx",sourceDirName:"advanced",slug:"/advanced/global-theme-value",permalink:"/react-native-styled-system/docs/advanced/global-theme-value",draft:!1,unlisted:!1,editUrl:"https://github.com/mym0404/react-native-styled-system/tree/main/doc/docs/advanced/global-theme-value.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Get Theme value in global"},sidebar:"tutorialSidebar",previous:{title:"Get token value with useSxTokens",permalink:"/react-native-styled-system/docs/advanced/get-token-value"},next:{title:"API",permalink:"/react-native-styled-system/docs/category/api"}},i={},d=[];function h(e){const t={admonition:"admonition",code:"code",h1:"h1",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"get-theme-value-globally",children:"Get Theme Value Globally"}),"\n",(0,s.jsx)(t.p,{children:"The React Native Styled System does not provide a way to retrieve themes from globally outside of React's Context."}),"\n",(0,s.jsxs)(t.p,{children:["However, when you pass a theme to ",(0,s.jsx)(t.code,{children:"StyledSystemProvider"}),", you can store the theme as a global object and reference it in your code where this theme changes."]}),"\n",(0,s.jsxs)(t.p,{children:["Let's say you have a Wrapper component in your code that wraps a ",(0,s.jsx)(t.code,{children:"StyledSystemProvider"})," like this:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:"import...\nimport StyledSystemTheme from './AppTheme'\n\nexport const StyledSystemAppThemeProvider = ({ children }: PropsWithChildren<{}>) => {\n  const { sfTop, sfBottom, sfLeft, sfRight } = useSafeAreaValues();\n\n  const theme = useMemo(() => {\n    const safeArea = { sfTop, sfRight, sfBottom, sfLeft };\n    return {\n      ...StyledSystemTheme,\n      sizes: { ...StyledSystemTheme.sizes, ...safeArea },\n      space: { ...StyledSystemTheme.space, ...safeArea },\n    };\n  }, [sfLeft, sfTop, sfRight, sfBottom]);\n\n  return <StyledSystemProvider theme={theme}>{children}</StyledSystemProvider>;\n};\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Now, when the ",(0,s.jsx)(t.code,{children:"theme"})," object changes, we save it for reference as a global variable."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:"import...\nimport StyledSystemTheme from './AppTheme'\n\n//highlight-start\nlet _globalTheme: ThemedDict = StyledSystemTheme;\nexport const getGlobalTheme = () => _globalTheme;\n//highlight-end\n\nexport const StyledSystemAppThemeProvider = ({ children }: PropsWithChildren<{}>) => {\n  const { sfTop, sfBottom, sfLeft, sfRight } = useSafeAreaValues();\n\n  const theme = useMemo(() => {\n    const safeArea = { sfTop, sfRight, sfBottom, sfLeft };\n    return {\n      ...StyledSystemTheme,\n      sizes: { ...StyledSystemTheme.sizes, ...safeArea },\n      space: { ...StyledSystemTheme.space, ...safeArea },\n    };\n  }, [sfLeft, sfTop, sfRight, sfBottom]);\n\n//highlight-start\n  useEffect(() => {\n    _globalTheme = theme;\n  }, [theme]);\n//highlight-end\n\n  return <StyledSystemProvider theme={theme}>{children}</StyledSystemProvider>;\n};\n"})}),"\n",(0,s.jsxs)(t.p,{children:["We can now reference the theme via ",(0,s.jsx)(t.code,{children:"getGlobalTheme()"})," in our code."]}),"\n",(0,s.jsxs)(t.admonition,{type:"warning",children:[(0,s.jsxs)(t.p,{children:["Note that the latest ",(0,s.jsx)(t.code,{children:"theme"})," value may not always be referenced."]}),(0,s.jsxs)(t.p,{children:["For example, save the value returned by ",(0,s.jsx)(t.code,{children:"getGlobalTheme()"})," in a variable and then\nIf you try to use it after the theme value has changed, it will point to the old value."]})]})]})}function c(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var s=n(6540);const o={},a=s.createContext(o);function r(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);