"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4713],{4863:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var o=t(4848),s=t(8453);const r={sidebar_position:3,title:"Component"},i="Component",l={id:"usage/component",title:"Component",description:"React Native Styled System does not create basic components internally.",source:"@site/docs/usage/component.mdx",sourceDirName:"usage",slug:"/usage/component",permalink:"/react-native-styled-system/docs/usage/component",draft:!1,unlisted:!1,editUrl:"https://github.com/mym0404/react-native-styled-system/tree/main/doc/docs/usage/component.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Component"},sidebar:"tutorialSidebar",previous:{title:"Configuration",permalink:"/react-native-styled-system/docs/usage/configuration"},next:{title:"Text & Typography",permalink:"/react-native-styled-system/docs/usage/text"}},c={},d=[{value:"<code>StyledView</code> example",id:"styledview-example",level:2},{value:"Method 1 - use <code>createSxComponent</code> HOC",id:"method-1---use-createsxcomponent-hoc",level:3},{value:"Method 2 - use <code>useSx</code> hook manually",id:"method-2---use-usesx-hook-manually",level:3},{value:"Example of refactoring an existing component",id:"example-of-refactoring-an-existing-component",level:2},{value:"Example without Props destruction",id:"example-without-props-destruction",level:2}];function a(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"component",children:"Component"}),"\n",(0,o.jsx)(n.p,{children:"React Native Styled System does not create basic components internally."}),"\n",(0,o.jsx)(n.p,{children:"Instead, you can define the components that will use your theme directly with a simple and extensible API."}),"\n",(0,o.jsx)(n.p,{children:"The mainly used APIs are as follows."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"useSx(hook)"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"SxProps(type)"})}),"\n"]}),"\n",(0,o.jsxs)(n.h2,{id:"styledview-example",children:[(0,o.jsx)(n.code,{children:"StyledView"})," example"]}),"\n",(0,o.jsxs)(n.p,{children:["Let\u2019s create a component that can use React Native\u2019s ",(0,o.jsx)(n.code,{children:"View"})," component like a Styled System."]}),"\n",(0,o.jsxs)(n.p,{children:["How to use the completed ",(0,o.jsx)(n.code,{children:"StyledView"})," component is as follows."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://raw.githubusercontent.com/mym0404/image-archive/master/202403131245340.png",alt:"image.png"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"<StyledView w={48} h={48}>\n  <StyledView w={'100%'} h={24} radius={12} bg={'red500'} t={0} />\n  <StyledView w={24} h={24} radius={12} bg={'blue400'} pos={'absolute'} t={0} r={'-24'} />\n  <StyledView w={24} h={24} radius={12} bg={'yellow300'} pos={'absolute'} b={0} r={-24} />\n  <StyledView w={24} h={24} radius={12} bg={'violet400'} pos={'absolute'} b={0} r={'-48'} />\n  <StyledView w={24} h={24} radius={12} bg={'violet50'} pos={'absolute'} b={0} l={'sidePadding'} />\n</StyledView>\n"})}),"\n",(0,o.jsx)(n.p,{children:"It can be defined as follows:"}),"\n",(0,o.jsxs)(n.h3,{id:"method-1---use-createsxcomponent-hoc",children:["Method 1 - use ",(0,o.jsx)(n.code,{children:"createSxComponent"})," HOC"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",metastring:'title="StyledView.tsx"',children:"import type { ComponentProps } from 'react';\nimport { View } from 'react-native';\nimport { createSxComponent } from '@react-native-styled-system/core';\n\nexport const StyledView = createSxComponent(View)();\nexport type StyledViewProps = ComponentProps<typeof StyledView>;\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"createSxComponent"})," and ",(0,o.jsx)(n.code,{children:"createSxTextComponent"})," are simple but may have limitations in their usage."]}),"\n",(0,o.jsx)(n.p,{children:"These HOCs simply add style-related fields to the Props and create a style object to pass to the passed view."}),"\n",(0,o.jsxs)(n.h3,{id:"method-2---use-usesx-hook-manually",children:["Method 2 - use ",(0,o.jsx)(n.code,{children:"useSx"})," hook manually"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",metastring:'title="StyledView.tsx"',children:"import { forwardRef, Ref, PropsWithChildren } from 'react';\nimport { View, ViewProps } from 'react-native';\nimport { SxProps, useSx } from '@react-native-styled-system/core';\n\ntype StyledViewProps = PropsWithChildren<ViewProps & SxProps>;\nconst StyledView = forwardRef((props: StyledViewProps, ref: Ref<View>) => {\n  const { getStyle, filteredProps } = useSx(props);\n  return <View ref={ref} style={getStyle()} {...filteredProps} />;\n});\n\nexport { StyledView };\nexport type { StyledViewProps };\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"useSx"})," is responsible for receiving ",(0,o.jsx)(n.code,{children:"SxProps"})," and converting it to ",(0,o.jsx)(n.code,{children:"ViewStyle"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["You can call the ",(0,o.jsx)(n.code,{children:"getStyle"})," function returned by ",(0,o.jsx)(n.code,{children:"useSx"})," and pass it to the ",(0,o.jsx)(n.code,{children:"style"})," prop of the desired view."]}),"\n",(0,o.jsxs)(n.admonition,{type:"warning",children:[(0,o.jsxs)(n.p,{children:["The prop type of a component containing the ",(0,o.jsx)(n.code,{children:"SxProps"})," type includes all the keys included in ",(0,o.jsx)(n.code,{children:"SxProps"}),"."]}),(0,o.jsxs)(n.p,{children:["Therefore, if all props from the parent are passed through object destruction like in the existing ",(0,o.jsx)(n.code,{children:"{...props}"}),", the keys do not overlap.\nYou need to be careful not to do so."]}),(0,o.jsxs)(n.p,{children:["Also, when using ",(0,o.jsx)(n.code,{children:"props"})," as is, it must always come before ",(0,o.jsx)(n.code,{children:"style"})," so as not to overwrite the ",(0,o.jsx)(n.code,{children:"style"})," of ",(0,o.jsx)(n.code,{children:"getStyle()"}),"."]}),(0,o.jsxs)(n.p,{children:["To prevent this, you can use ",(0,o.jsx)(n.code,{children:"filteredProps"})," in the return value of ",(0,o.jsx)(n.code,{children:"useSx"}),"."]}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"filteredProps"})," represents a new prop that filters all style-related fields such as ",(0,o.jsx)(n.code,{children:"style"}),", ",(0,o.jsx)(n.code,{children:"sx"}),", ",(0,o.jsx)(n.code,{children:"w"}),", and ",(0,o.jsx)(n.code,{children:"width"}),"."]})]}),"\n",(0,o.jsx)(n.h2,{id:"example-of-refactoring-an-existing-component",children:"Example of refactoring an existing component"}),"\n",(0,o.jsx)(n.p,{children:"Let's look at how to refactor existing components as follows."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"type Props = {\n  style?: StyleProp<ViewStyle>;\n  title?: string;\n  body?: string;\n};\nconst ExistComponent = ({\n  style,\n  title,\n  body,\n}: Props) => {\n  return (\n    <View\n      style={[style, { alignItems: 'center', justifyContent: 'center' }]}\n    >\n...\n"})}),"\n",(0,o.jsx)(n.p,{children:"This changes to:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"type Props = {\n  style?: StyleProp<ViewStyle>;\n  title?: string;\n  body?: string;\n//highlight-next-line\n} & SxProps;\nconst ScreenErrorFallback = (props: Props) => {\n//highlight-next-line\n  const { title, body } = props;\n//highlight-next-line\n  const { getStyle } = useSx(props);\n  const getSxStyle = useSxStyle();\n  return (\n    <View\n//highlight-next-line\n      style={[getStyle(), getSxStyle({ center: true })]}\n      pointerEvents={'box-none'}\n    >\n"})}),"\n",(0,o.jsx)(n.p,{children:"There are a few things to keep in mind."}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"useSx"})," includes ",(0,o.jsx)(n.code,{children:"props.style"})," in the automatically created style output.\nThere is no need to add ",(0,o.jsx)(n.code,{children:"style"})," as a prop to ",(0,o.jsx)(n.code,{children:"style"})," of ",(0,o.jsx)(n.code,{children:"View"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["Always pass all ",(0,o.jsx)(n.code,{children:"props"})," objects themselves to ",(0,o.jsx)(n.code,{children:"useSx"})," to avoid missing any properties. ",(0,o.jsx)(n.code,{children:"useSx"}),"\nProperties that are not used internally are ignored and not changed."]}),"\n",(0,o.jsxs)(n.li,{children:["Fixed style overwriting ",(0,o.jsx)(n.code,{children:"props"})," can be applied with ",(0,o.jsx)(n.code,{children:"getSxStyle"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"center"})," is a shortcut for ",(0,o.jsx)(n.code,{children:"justifyContent: center"}),", ",(0,o.jsx)(n.code,{children:"alignItems: center"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"example-without-props-destruction",children:"Example without Props destruction"}),"\n",(0,o.jsxs)(n.p,{children:["If you need a style object that can control multiple views in a component's props or do not want props destruction,\nYou can define a component using the ",(0,o.jsx)(n.code,{children:"sx"})," prop as follows."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",metastring:'title="StyledScrollView.tsx"',children:"import { PropsWithChildren, forwardRef, Ref } from 'react';\nimport { ScrollViewProps, ScrollView } from 'react-native';\nimport { SxProps, useSx } from '@react-native-styled-system/core';\n\ntype StyledScrollViewProps = PropsWithChildren<\n  {\n    contentContainerSx?: SxProps;\n  } & Omit<ScrollViewProps, 'contentContainerStyle'> &\n    SxProps\n>;\nconst StyledScrollView = forwardRef((props: StyledScrollViewProps, ref: Ref<ScrollView>) => {\n  const { getStyle, filteredProps } = useSx(props);\n  const { getStyle: contentContainerStyle } = useSx(props.contentContainerSx);\n  return (\n    <ScrollView ref={ref} style={getStyle()} contentContainerStyle={contentContainerStyle()} {...filteredProps} />\n  );\n});\n\nexport { StyledScrollView };\nexport type { StyledScrollViewProps };\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This is a redefinition of ",(0,o.jsx)(n.code,{children:"ScrollView"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["In addition to ",(0,o.jsx)(n.code,{children:"style"}),", ",(0,o.jsx)(n.code,{children:"ScrollView"})," has one more style prop called ",(0,o.jsx)(n.code,{children:"contentContainerStyle"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Therefore, it is accepted as a field called ",(0,o.jsx)(n.code,{children:"contentContainerSx"})," as a ",(0,o.jsx)(n.code,{children:"SxProps"})," type, and the ",(0,o.jsx)(n.code,{children:"contentContainerStyle"})," of the original ",(0,o.jsx)(n.code,{children:"ScrollViewProps"})," is created using ",(0,o.jsx)(n.code,{children:"Omit"}),".\nBe prepared for any possible bugs."]}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["I still feel like there is a lot of code that needs to be written in this example, so I recommend improving it to a simpler Helper API.\nWe also plan to support several props of ",(0,o.jsx)(n.code,{children:"ScrollView"})," separately."]})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var o=t(6540);const s={},r=o.createContext(s);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);